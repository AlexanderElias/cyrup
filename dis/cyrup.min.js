/*
	Name: cyrup
	Version: 0.2.2
	License: MPL-2.0
	Author: Alexander Elias
	Email: alex.steven.elias@gmail.com
	This Source Code Form is subject to the terms of the Mozilla Public
	License, v. 2.0. If a copy of the MPL was not distributed with this
	file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
var _async=function(){try{if(isNaN.apply(null,{}))return function(a){return function(){try{return Promise.resolve(a.apply(this,arguments))}catch(a){return Promise.reject(a)}}}}catch(a){}return function(a){return function(){for(var b=[],c=0;c<arguments.length;c++)b[c]=arguments[c];try{return Promise.resolve(a.apply(this,b))}catch(a){return Promise.reject(a)}}}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};(function(a,b){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define("Cyrup",b):a.Cyrup=b()})(this,function(){"use strict";var a={ENCODING:"hex",ITERATIONS:999999,KEY:32,TAG:16,SALT:16,VECTOR:12,SECRET:48,HASH:"sha-512",ALGORITHM:"aes-256-gcm",passwordHash:function(a){var b=this;if(!a)throw new Error("password item required");return Promise.resolve().then(function(){return b.key(a)})},passwordCompare:function(a,b){var c=this;if(!a)throw new Error("password text required");if(!b)throw new Error("password hash required");return Promise.resolve().then(function(){return c.hexToBuffer(b.split(":")[1])}).then(function(b){return c.key(a,{salt:b})}).then(function(a){return a===b})},random:function(a){var b=this;if(!a)throw new Error("size required");return Promise.resolve().then(function(){return b.randomBytes(a)}).then(function(a){return b.bufferToHex(a)})},secret:function(a){var b=this;return a=a||b.SECRET,Promise.resolve().then(function(){return b.randomBytes(a)}).then(function(a){return b.bufferToHex(a)})},hash:function(a,b){var c=this;if(!a)throw new Error("item required");return b=c.normalizeHash(b||c.HASH),Promise.resolve().then(function(){return c.stringToBuffer(a)}).then(function(a){return c.createHash(a,b)}).then(function(a){return c.bufferToHex(a)})},key:function(a,b){var c=this;if(!a)throw new Error("item required");b=b||{},b.size=b.size||c.KEY,b.salt=b.salt||c.SALT,b.iterations=b.iterations||c.ITERATIONS,b.hash=c.normalizeHash(b.hash||c.HASH);var d;return Promise.all(["string"==typeof a?c.stringToBuffer(a):a,"string"==typeof b.salt?c.stringToBuffer(b.salt):"number"==typeof b.salt?c.randomBytes(b.salt):b.salt]).then(function(e){return a=e[0],d=e[1],c.pbkdf2(a,d,b.iterations,b.size,b.hash)}).then(function(a){return Promise.all([c.bufferToHex(a),c.bufferToHex(d)]).then(function(a){return a.join(":")})})},encrypt:function(a,b,c,d){var e=this;if(!b)throw new Error("key required");if(!a)throw new Error("item required");return d=d||e.VECTOR,c=e.normalizeAlgorithm(c||e.ALGORITHM),b=b.split(":")[0],Promise.all([e.hexToBuffer(b),"string"==typeof a?e.stringToBuffer(a):a,"string"==typeof d?e.stringToBuffer(d):e.randomBytes(d)]).then(function(f){return b=f[0],a=f[1],d=f[2],e.cipher(c,b,d,a)}).then(function(a){return Promise.all([e.bufferToHex(a),e.bufferToHex(d)]).then(function(a){return a.join(":")})})},decrypt:function(a,b,c){var d=this;if(!b)throw new Error("key required");if(!a)throw new Error("item required");c=d.normalizeAlgorithm(c||d.ALGORITHM);var e=void 0,f=a.split(":");return b=b.split(":")[0],a=f[0],e=f[1],Promise.all([d.hexToBuffer(b),d.hexToBuffer(a),d.hexToBuffer(e)]).then(function(f){return b=f[0],a=f[1],e=f[2],d.decipher(c,b,e,a)}).then(function(a){return d.bufferToString(a)})}};if("undefined"==typeof window){var b=require("util"),c=require("crypto"),d=b.promisify(c.pbkdf2),e=b.promisify(c.randomBytes);a.normalizeHash=function(a){return a.replace("-","").toLowerCase()},a.normalizeAlgorithm=function(a){return 0===a.toLowerCase().indexOf("aes")?a.toLowerCase():a},a.hexToBuffer=_async(function(a){return Buffer.from(a,"hex")}),a.bufferToHex=_async(function(a){return a.toString("hex")}),a.stringToBuffer=_async(function(a){return Buffer.from(a,"utf8")}),a.bufferToString=_async(function(a){return a.toString("utf8")}),a.createHash=_async(function(a,b){return c.createHash(b).update(a).digest()}),a.randomBytes=_async(function(a){return e(a)}),a.pbkdf2=_async(function(a,b,c,e,f){return d(a,b,c,e,f)}),a.cipher=_async(function(a,b,d,e){var f=c.createCipheriv(a,b,d);return Buffer.concat([f.update(e,"utf8"),f.final(),f.getAuthTag()])}),a.decipher=_async(function(a,b,d,e){var f=this,g=f,h=Buffer.from(e,"hex"),i=h.slice(h.byteLength-g.TAG),j=h.slice(0,h.byteLength-g.TAG),k=c.createDecipheriv(a,b,d);return k.setAuthTag(i),Buffer.concat([k.update(j),k.final()])})}else a.normalizeHash=function(a){return a.toUpperCase()},a.normalizeAlgorithm=function(a){if(0!==a.toLowerCase().indexOf("aes"))return a;var b=a.split("-");return(b[0]+"-"+b[2]).toUpperCase()},a.getAuthTag=function(a){return a.slice(a.byteLength-this.TAG)},a.hexToBuffer=function(a){return Promise.resolve().then(function(){if("string"!=typeof a)throw new TypeError("Expected input to be a string");if(0!=a.length%2)throw new RangeError("Expected string to be an even number of characters");for(var b=new Uint8Array(a.length/2),c=0,d=a.length;c<d;c+=2)b[c/2]=parseInt(a.substring(c,c+2),16);return b.buffer})},a.bufferToHex=function(a){return Promise.resolve().then(function(){for(var b=new Uint8Array(a),c=Array(b.length),d=0,e=b.length;d<e;d++)c[d]=("00"+b[d].toString(16)).slice(-2);return c.join("")})},a.stringToBuffer=function(a){return Promise.resolve().then(function(){for(var b=new Uint8Array(a.length),c=0,d=a.length;c<d;c++)b[c]=a.charCodeAt(c);return b.buffer})},a.bufferToString=function(a){return Promise.resolve().then(function(){for(var b=new Uint8Array(a),c=Array(b.length),d=0,e=b.length;d<e;d++)c[d]=String.fromCharCode(b[d]);return c.join("")})},a.createHash=function(a,b){return Promise.resolve().then(function(){return window.crypto.subtle.digest(b,a)})},a.randomBytes=function(a){return Promise.resolve().then(function(){return window.crypto.getRandomValues(new Uint8Array(a))})},a.pbkdf2=function(a,b,c,d,e){return Promise.resolve().then(function(){return window.crypto.subtle.importKey("raw",a,{name:"PBKDF2"},!1,["deriveBits"])}).then(function(a){return window.crypto.subtle.deriveBits({salt:b,iterations:c,name:"PBKDF2",hash:{name:e}},a,d<<3)}).then(function(a){return new Uint8Array(a)})},a.cipher=function(a,b,c,d){var e=this;return Promise.resolve().then(function(){return window.crypto.subtle.importKey("raw",b,{name:a},!1,["encrypt"])}).then(function(b){var f=8*e.TAG;return window.crypto.subtle.encrypt({name:a,iv:c,tagLength:f},b,d)})},a.decipher=function(a,b,c,d){var e=this;return Promise.resolve().then(function(){return window.crypto.subtle.importKey("raw",b,{name:a},!1,["decrypt"])}).then(function(b){var f=8*e.TAG;return window.crypto.subtle.decrypt({name:a,iv:c,tagLength:f},b,d)})};return a});