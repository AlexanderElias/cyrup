/*
	Name: cyrup
	Version: 0.0.4
	License: MPL-2.0
	Author: Alexander Elias
	Email: alex.steven.elias@gmail.com
	This Source Code Form is subject to the terms of the Mozilla Public
	License, v. 2.0. If a copy of the MPL was not distributed with this
	file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};(function(a,b){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define("Cyrup",b):a.Cyrup=b()})(this,function(){"use strict";return{hexToBuffer:function(a){return Promise.resolve().then(function(){if("string"!=typeof a)throw new TypeError("Expected input to be a string");if(0!=a.length%2)throw new RangeError("Expected string to be an even number of characters");for(var b=new Uint8Array(a.length/2),c=0,d=a.length;c<d;c+=2)b[c/2]=parseInt(a.substring(c,c+2),16);return b.buffer})},bufferToHex:function(a){return Promise.resolve().then(function(){for(var b=new Uint8Array(a),c=[],d=0,e=b.length;d<e;d++){var f=b[d].toString(16),g=("00"+f).slice(-2);c.push(g)}return c.join("")})},stringToBuffer:function(a){return Promise.resolve().then(function(){for(var b=new Uint8Array(a.length),c=0,d=a.length;c<d;c++)b[c]=a.charCodeAt(c);return b.buffer})},bufferToString:function(a){for(var b="",c=0;c<a.byteLength;c++)b+=String.fromCharCode(a[c]);return b},hasher:function(a,b){var c=this;return b=b||{},b.type=b.type||"SHA-256",Promise.resolve().then(function(){return c.stringToBuffer(a)}).then(function(a){return window.crypto.subtle.digest(b.type,a)}).then(function(a){return c.bufferToHex(a)})},encrypt:function(a,b){var c=this,d=window.crypto.getRandomValues(new Uint8Array(12)),e={name:"AES-GCM",iv:d};return Promise.resolve().then(function(){return c.stringToBuffer(a)}).then(function(a){return window.crypto.subtle.digest("SHA-256",a)}).then(function(a){return Promise.all([c.stringToBuffer(b),window.crypto.subtle.importKey("raw",a,e,!1,["encrypt"])])}).then(function(a){return window.crypto.subtle.encrypt(e,a[1],a[0])}).then(function(a){return Promise.all([c.bufferToHex(d),c.bufferToHex(a)]).then(function(a){return a.join(":")})})},decrypt:function(a,b){var c=this,d=b.split(":"),e={name:"AES-GCM"},f=d[0],g=d[1],h=void 0,i=void 0;return Promise.all([c.hexToBuffer(f),c.stringToBuffer(a),c.hexToBuffer(g)]).then(function(a){e.iv=a[0],h=a[1],i=a[2]}).then(function(){return window.crypto.subtle.digest("SHA-256",h)}).then(function(a){return window.crypto.subtle.importKey("raw",a,e,!1,["decrypt"])}).then(function(a){return window.crypto.subtle.decrypt(e,a,i)}).then(function(a){return c.bufferToString(a)})}}});