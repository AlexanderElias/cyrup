/*
	Name: Cyrup
	Version: 0.0.2
	License: MPL-2.0
	Author: Alexander Elias
	Email: alex.steven.elias@gmail.com
	This Source Code Form is subject to the terms of the Mozilla Public
	License, v. 2.0. If a copy of the MPL was not distributed with this
	file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
export default{hexToBuffer:function(a){return Promise.resolve().then(function(){if('string'!=typeof a)throw new TypeError('Expected input to be a string');if(0!=a.length%2)throw new RangeError('Expected string to be an even number of characters');for(var b=new Uint8Array(a.length/2),c=0,d=a.length;c<d;c+=2)b[c/2]=parseInt(a.substring(c,c+2),16);return b.buffer})},bufferToHex:function(a){return Promise.resolve().then(function(){for(var b=new Uint8Array(a),c=[],d=0,e=b.length;d<e;d++){var f=b[d].toString(16),g=('00'+f).slice(-2);c.push(g)}return c.join('')})},stringToBuffer:function(a){return Promise.resolve().then(function(){for(var b=new Uint8Array(a.length),c=0,d=a.length;c<d;c++)b[c]=a.charCodeAt(c);return b.buffer})},bufferToString:function(a){return Promise.resolve().then(function(){for(var b,d,e,c=String.fromCharCode,f=new Uint8Array(a),g=0,h='',i=f.length;g<i;)switch(e=f[g++],e>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:h+=c(e);break;case 12:case 13:b=f[g++],h+=c((31&e)<<6|63&b);break;case 14:b=f[g++],d=f[g++],h+=c((15&e)<<12|(63&b)<<6|(63&d)<<0);}return h})},encrypt:function(a,b){var c=this,d=window.crypto.getRandomValues(new Uint8Array(12)),e={name:'AES-GCM',iv:d};return Promise.resolve().then(function(){return c.stringToBuffer(a)}).then(function(a){return window.crypto.subtle.digest('SHA-256',a)}).then(function(a){return Promise.all([c.stringToBuffer(b),window.crypto.subtle.importKey('raw',a,e,!1,['encrypt'])])}).then(function(a){return window.crypto.subtle.encrypt(e,a[1],a[0])}).then(function(a){return Promise.all([c.bufferToHex(d),c.bufferToHex(a)]).then(function(a){return a.join(':')})})},decrypt:function(a,b){var c,d,e=this,f=b.split(':'),g={name:'AES-GCM'},h=f[0],i=f[1];return Promise.all([e.hexToBuffer(h),e.stringToBuffer(a),e.hexToBuffer(i)]).then(function(a){g.iv=a[0],c=a[1],d=a[2]}).then(function(){return window.crypto.subtle.digest('SHA-256',c)}).then(function(a){return window.crypto.subtle.importKey('raw',a,g,!1,['decrypt'])}).then(function(a){return window.crypto.subtle.decrypt(g,a,d)}).then(function(a){return console.log(a),e.bufferToString(a)})}};
